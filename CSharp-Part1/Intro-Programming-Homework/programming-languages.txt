Problem 11. Programming Languages
	• Perform a research (e.g. in Google or Wikipedia) and provide a short list with information about the most popular programming languages. 
	  How similar are they to C#? How do they differ from C#?
	• Write in a text file called  “programming-languages.txt”  at least five languages along with 2-3 sentences about each of them. Use English.


C
By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications 
that had formerly been coded in assembly language, including operating systems as well as various application software for computers ranging 
from supercomputers to embedded systems.
	Similarities: Imperative and procedural languages.
	Differences: Unlike C#, C is not an object-oriented, functional, generic, reflective and event-driven language.

Objective-C
It is the main programming language used by Apple for the OS X and iOS operating systems, and their respective application programming 
interfaces (APIs), Cocoa and Cocoa Touch. Objective-C is a thin layer on top of C, and is often called a "strict superset" of C, meaning 
that it should be possible to compile any C program with an Objective-C compiler, and to freely include C code within an Objective-C class.
	Similarities: Imperative, object-oriented, reflective languages.
	Differences: Unlike C#, Objective-C is not a procedural, functional, generic and event-driven language.

C++ 
It is designed with a bias toward system programming (e.g., for use in embedded systems or operating system kernels), with performance, 
efficiency and flexibility of use as its design requirements. C++ has also been found useful in many other contexts, including desktop 
applications, servers (e.g. e-commerce, web search or SQL servers), performance-critical applications (e.g. telephone switches or space 
probes), and entertainment software. C++ is a compiled language, with implementations of it available on many platforms and provided by 
various organizations, including the FSF, LLVM, Microsoft and Intel.
	Similarities: Imperative, object-oriented, functional, procedural and generic languages.
	Differences: Unlike C#, C++ is not a reflective and event-driven language.

Java
Java is a functional computer programming language that is concurrent, class-based, object-oriented,[11] and specifically designed to 
have as few implementation dependencies as possible. It is intended to let application developers "write once, run anywhere" (WORA), 
meaning that code that runs on one platform does not need to be recompiled to run on another. Java applications are typically compiled 
to bytecode that can run on any Java virtual machine (JVM) regardless of computer architecture.
	Similarities: Imperative, object-oriented, generic, reflective languages.
	Differences: Unlike C#, Java is not a functional and procedural language.

JavaScript
It is most commonly used as part of web browsers, whose implementations allow client-side scripts to interact with the user, control the 
browser, communicate asynchronously, and alter the document content that is displayed. It is also used in server-side network programming 
with runtime environments such as Node.js, game development and the creation of desktop and mobile applications.
	Similarities: Imperative, object-oriented, functional, reflective languages.
	Differences: Unlike C#, JavaScript is not a procedural, generic and event-driven language.

Python
Python is a widely used general-purpose, high-level programming language. Its design philosophy emphasizes code readability, and its syntax 
allows programmers to express concepts in fewer lines of code than would be possible in languages such as C++ or Java. The language provides 
constructs intended to enable clear programs on both a small and large scale. Python interpreters are available for installation on many 
operating systems, allowing Python code execution on a wide variety of systems.
	Similarities: Imperative, object-oriented, functional, reflective languages.
	Differences: Unlike C#, Python is not a procedural, generic and event-driven language.

Perl
Perl is a family of high-level, general-purpose, interpreted, dynamic programming languages. The languages in this family include Perl 5 and 
Perl 6. The design of Perl can be understood as a response to three broad trends in the computer industry: falling hardware costs, rising 
labor costs, and improvements in compiler technology. Many earlier computer languages, such as Fortran and C, aimed to make efficient use 
of expensive computer hardware. In contrast, Perl was designed so that computer programmers could write programs more quickly and easily.
	Similarities: Imperative, object-oriented, functional, procedural, generic, reflective languages
	Differences: Unlike C#, Perl is not an event-driven language.
